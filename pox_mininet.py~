## it could connect to mininet_service!

import uuid
import json
import sys
import socket
import argparse
#from pox.messenger.test_client import JSONDestreamer

#uniq = str(uuid.uuid4())
#mychannel = 'log_' + str(uuid.uuid4())



parser = argparse.ArgumentParser(description='Connect to the POX log service')
#parser.add_argument('loggers', metavar='loggers', nargs='*',
#                   help='loggers to listen to (logger[=level])')
#parser.add_argument('--level', dest='default_level', default='INFO',
#                    help="Default log level")
parser.add_argument('--address', dest='address', default='127.0.0.1',
                    help="Messenger service address")
parser.add_argument('--port', dest='port', default='7790', type=int,
                    help="Messenger service port")

args = parser.parse_args()

host = args.address
port = args.port

class JSONDestreamer (object):
  import json
  decoder = json.JSONDecoder()
  def __init__ (self, callback = None):
    self._buf = ''
    self.callback = callback if callback else self.rx

  def push (self, data):
    print "data: ", data
    if len(self._buf) == 0:
      print "buf is none now"
      data = data.lstrip()
      print "data", data
    self._buf += data
    print "buf: ", self._buf
    
    
"""    try:
      while len(self._buf) > 0:
        r,off = self.decoder.raw_decode(self._buf)

        self._buf = self._buf[off:].lstrip()
        self.callback(r)
    except ValueError:
      pass
"""
class LogJSONDestreamer (JSONDestreamer):
  def rx (self, data):
    if data.get('CHANNEL') != mychannel: return

    print "%s|%s|%s" % (data['levelname'], data['name'], data['message'])


jd = LogJSONDestreamer()

while True:
  try:
    sock = socket.socket()
    sock.connect((host,port))
    print >>sys.stderr, "== Connected =="
    msg = {
        'CHANNEL' : '',
        'cmd' : 'join_channel',
        'channel' : 'CMS',
        'json' : True,
    }
    sock.send(json.dumps(msg))
    msg = {
        'CHANNEL' : 'CMS',
        'host' : 'node1',
    }
    sock.send(json.dumps(msg))

    try:
      while True:
        d = sock.recv(1024)
        print "d", d
        print "len:d --", len(d)
        if len(d) == 0: raise RuntimeError()
        jd.push(d)
    except KeyboardInterrupt:
      pass
    except RuntimeError as e:
      print >>sys.stderr, "== Disconnected =="
      try:
        sock.close()
      except:
        pass
  except KeyboardInterrupt:
    break
  except:
    pass
